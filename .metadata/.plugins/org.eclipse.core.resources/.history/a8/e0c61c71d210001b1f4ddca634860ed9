package joffre.NanifarfallaRest.config;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import springfox.documentation.builders.AuthorizationCodeGrantBuilder;
import springfox.documentation.builders.OAuthBuilder;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

import static com.google.common.collect.Lists.newArrayList;

import java.security.Security;
import java.util.Arrays;

import org.springframework.web.bind.annotation.RequestMethod;


import springfox.documentation.builders.ResponseMessageBuilder;
import springfox.documentation.schema.ModelRef;
import springfox.documentation.service.ApiInfo;
import springfox.documentation.service.Contact;
import springfox.documentation.service.GrantType;
import springfox.documentation.service.SecurityScheme;
import springfox.documentation.service.TokenEndpoint;
import springfox.documentation.service.TokenRequestEndpoint;





@Configuration
@EnableSwagger2
public class PruebaSwagger {
	@Bean
	 public Docket api() { 
       return new Docket(DocumentationType.SWAGGER_2)  
         .select()                                  
         .apis(RequestHandlerSelectors.basePackage("joffre.NanifarfallaRest.controller"))              
         .paths(PathSelectors.any())                          
         .build() .apiInfo(apiInfo())
         .useDefaultResponseMessages(false)
         .globalResponseMessage(RequestMethod.GET, newArrayList(new ResponseMessageBuilder().code(500)
             .message("500 message")
             .responseModel(new ModelRef("Error"))
             .build()  
             .securitySchemes(Arrays.asList(securityScheme()))
             .securityContexts(Arrays.asList(securityContext())),
             new ResponseMessageBuilder().code(403)
                 .message("Forbidden!!!!!")
                 .build()));
 }

 private ApiInfo apiInfo() {
     ApiInfo apiInfo = new ApiInfo("NANIFARFALLA REST API", "Nanifarfalla APIs for developments.", "NANIFARFALLA API TOS", "Terms of service", new Contact("Joffre Hermosilla Salas", "www.nanifarfalla.com.pe", "virtualstore@nanifarfalla.com.pe"), "License of API", "API license URL");
     return apiInfo;
 }
 
 
 @Bean
 public SecurityConfiguration security() {
     return SecurityConfigurationBuilder.builder()
         .clientId(CLIENT_ID)
         .clientSecret(CLIENT_SECRET)
         .scopeSeparator(" ")
         .useBasicAuthenticationWithAccessCodeGrant(true)
         .build();
 }
 
 private SecurityScheme  securityScheme() {
	    GrantType grantType = new AuthorizationCodeGrantBuilder()
	        .tokenEndpoint(new TokenEndpoint(AUTH_SERVER + "/token", "oauthtoken"))
	        .tokenRequestEndpoint(
	          new TokenRequestEndpoint(AUTH_SERVER + "/authorize", CLIENT_ID, CLIENT_SECRET))
	        .build();
	 
	    SecurityScheme oauth = new OAuthBuilder().name("spring_oauth")
	        .grantTypes(Arrays.asList(grantType))
	        .scopes(Arrays.asList(scopes()))
	        .build();
	    return oauth;
	}
 
}