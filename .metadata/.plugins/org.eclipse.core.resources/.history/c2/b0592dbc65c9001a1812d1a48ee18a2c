package joffre.NanifarfallaRest.controller;

import java.util.List;

import javax.validation.Valid;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import joffre.NanifarfallaRest.exception.ResourceNotFoundException;
import joffre.NanifarfallaRest.model.Anuncio;
import joffre.NanifarfallaRest.repository.AnuncioRepository;

@RestController
@RequestMapping("/apiAnuncio")
public class AnuncioController {
	private static final Log LOGGER = LogFactory.getLog(AnuncioController.class);
	@Autowired
	AnuncioRepository anuncioRepository;
	
	@GetMapping("/anuncios")
	public List<Anuncio> getAllAnuncios() {
		LOGGER.info("INFO TRACE");
		LOGGER.warn("WARNING  TRACE");
		LOGGER.error("ERROR TRACE");
		LOGGER.debug("DEBUG  TRACE");
		return anuncioRepository.findAll();
	}

	@PostMapping("/Addanuncio")
	public Anuncio createAnuncio(@Valid @RequestBody Anuncio anuncio) {
		LOGGER.info("INFO TRACE");
		LOGGER.warn("WARNING  TRACE");
		LOGGER.error("ERROR TRACE");
		LOGGER.debug("DEBUG  TRACE");
		return anuncioRepository.save(anuncio);
	}

	@GetMapping("/anuncio/{id}")
	public Anuncio getAreaById(@PathVariable(value = "id") int anuncioId) {
		LOGGER.info("INFO  TRACE");
		LOGGER.warn("WARNING  TRACE");
		LOGGER.error("ERROR TRACE");
		LOGGER.debug("DEBUG  TRACE");
		return anuncioRepository.findById(anuncioId).orElseThrow(() -> new ResourceNotFoundException("Anuncio", "id", anuncioId));
	}

	@PutMapping("/areas/{id}")
	public Anuncio updateAnuncio(@PathVariable(value = "id") int anuncioId, @Valid @RequestBody Anuncio anuncioDetails) {

		Anuncio anuncio = anuncioRepository.findById(anuncioId)
				.orElseThrow(() -> new ResourceNotFoundException("Anuncio", "id", anuncioId));
		
		
		anuncio.setMensaje_anuncio(anuncioDetails.getMensaje_anuncio());
		
		area.setNombre_area(areaDetails.getNombre_area());
		area.setVendedor(areaDetails.getVendedor());
	    area.setVersion(areaDetails.getVersion());
		area.setClaveApi(areaDetails.getClaveApi());

		Area updatedArea = arearepository.save(area);
		LOGGER.info("METHOD: 'updateArea'--PARAMS: '" + areaDetails + "'");
		LOGGER.warn("WARNING  TRACE");
		LOGGER.error("ERROR TRACE");
		LOGGER.debug("DEBUG  TRACE");
		return updatedArea;
	}

	@DeleteMapping("/area/{id}")
	public ResponseEntity<?> deleteArea(@PathVariable(value = "id") int areaId) {
		Area area = arearepository.findById(areaId)
				.orElseThrow(() -> new ResourceNotFoundException("Area", "id", areaId));

		arearepository.delete(area);
		LOGGER.info("METHOD: 'deleteArea'--PARAMS: '" + area + "'");
		LOGGER.warn("WARNING  TRACE");
		LOGGER.error("ERROR TRACE");
		LOGGER.debug("DEBUG  TRACE");
		return ResponseEntity.ok().build();
	}
	// http://localhost:8085/nanifarfalla-service/swagger-ui.html
	
	
}
